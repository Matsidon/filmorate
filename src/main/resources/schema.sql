DROP TABLE IF EXISTS LIKES;
DROP TABLE IF EXISTS FILMS_GENRES;
DROP TABLE IF EXISTS FILMS;
DROP TABLE IF EXISTS MPA;
DROP TABLE IF EXISTS GENRES;
DROP TABLE IF EXISTS FRIENDSHIP;
DROP TABLE IF EXISTS USERS;

create table IF NOT EXISTS MPA
(
    RATING_ID   integer generated by default as identity not null,
    RATING_NAME varchar(50)                              not null,
    constraint RATING_ID_MPA_PK
        primary key (RATING_ID)
);
create table IF NOT EXISTS GENRES
(
    GENRE_ID   integer generated by default as identity not null,
    GENRE_NAME varchar(50)                              not null,
    constraint GENRE_ID_GENRES_PK
        primary key (GENRE_ID)
);
create table IF NOT EXISTS FILMS
(
    FILM_ID           bigint generated by default as identity not null,
    FILM_NAME         varchar                                 not null,
    FILM_DESCRIPTION  varchar(200)                            not null,
    FILM_RELEASE_DATE DATE                                    not null,
    FILM_DURATION     INTEGER                                 not null,
    FILM_RATE         bigint                                  not null,
    FILM_RATING_ID    integer                                 not null,
    constraint FILM_ID_FILMS_PK
        primary key (FILM_ID),
    constraint FILM_RATING_ID_FILMS_FK
        foreign key (FILM_RATING_ID) references MPA
);
create unique index IF NOT EXISTS FILM_NAME_UNIQUE
    on FILMS (FILM_NAME);

create table IF NOT EXISTS FILMS_GENRES
(
    FILM_ID  bigint  not null,
    GENRE_ID integer not null,
    constraint FILM_ID_FILMS_GENRES_FK
        foreign key (FILM_ID) references FILMS,
    constraint GENRE_ID_FILMS_GENRES_FK
        foreign key (GENRE_ID) references GENRES
);
create unique index IF NOT EXISTS FILMS_GENRES_UNIQUE
    on FILMS_GENRES (FILM_ID, GENRE_ID);

create table IF NOT EXISTS USERS
(
    USER_ID       bigint generated by default as identity not null,
    USER_LOGIN    varchar                                 not null,
    USER_NAME     varchar                                 not null,
    USER_EMAIL    varchar                                 not null,
    USER_BIRTHDAY date                                    not null,
    constraint USER_ID_USERS_PK
        primary key (USER_ID)
);

create unique index IF NOT EXISTS USERS_EMAIL_UNIQUE
    on USERS (USER_EMAIL);

create unique index IF NOT EXISTS USERS_LOGIN_UNIQUE
    on USERS (USER_LOGIN);
create table IF NOT EXISTS FRIENDSHIP
(
    USER_ID   bigint not null,
    FRIEND_ID bigint not null,
    constraint FRIENDSHIP_USER_ID_FK
        FOREIGN KEY (USER_ID) references USERS,
    constraint FRIENDSHIP_FRIEND_ID_FK
        FOREIGN KEY (FRIEND_ID) references USERS
);
create unique index IF NOT EXISTS FRIENDSHIP_UNIQUE
    on FRIENDSHIP (USER_ID, FRIEND_ID);
create table IF NOT EXISTS LIKES
(
    FILM_ID bigint not null,
    USER_ID bigint not null,
    constraint FILM_ID_LIKES_PK
        primary key (FILM_ID, USER_ID),
    constraint FILM_ID_FILMS_LIKES_FK
        foreign key (FILM_ID) references FILMS,
    constraint USER_ID_FILMS_LIKES_FK
        foreign key (USER_ID) references USERS
);
create unique index IF NOT EXISTS FILM_ID_USER_ID
    on LIKES (FILM_ID, USER_ID);





